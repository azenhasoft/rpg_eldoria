import tkinter as tk
from tkinter import scrolledtext, messagebox, ttk
import json
import random
import os
from PIL import Image, ImageTk

# Atributos do jogador
jogador = {
    "nome": "Eldrin",
    "mana": 80,
    "mana_max": 80,
    "saude": 40,
    "saude_max": 40,
    "conhecimento": 10,
    "inventario": [],
    "vitorias": 0,
    "cena_atual": "introducao",
    "nivel": 1,
    "xp": 0,
    "feitiços": ["Bola de Fogo", "Escudo Arcano", "Visão Mística"],
    "escudo_turnos": 0
}

# Interface gráfica
class JogoRPG:
    def __init__(self, root):
        self.root = root
        self.root.title("O Mistério de Vaeloria")
        self.root.geometry("700x500")

        # Estilo
        self.root.configure(bg="#2e2e2e")
        self.fonte = ("Arial", 12)

        # Imagem de fundo (comente se não tiver)
        try:
            self.bg_image = ImageTk.PhotoImage(Image.open("background.png").resize((700, 500)))
            self.bg_label = tk.Label(root, image=self.bg_image, bg="#2e2e2e")
            self.bg_label.place(relwidth=1, relheight=1)
        except:
            pass

        # Área de texto
        self.texto = scrolledtext.ScrolledText(root, wrap=tk.WORD, height=15, width=80, bg="#1a1a1a", fg="#ffffff", font=self.fonte)
        self.texto.pack(pady=10)
        self.texto.config(state='disabled')

        # Frame para botões
        self.frame_botoes = tk.Frame(root, bg="#2e2e2e")
        self.frame_botoes.pack(pady=5)

        # Botões de escolhas
        self.botoes = []
        for i in range(5):
            btn = tk.Button(self.frame_botoes, text="", command=lambda x=i: self.processar_escolha(x), bg="#4a4a4a", fg="#ffffff", font=self.fonte)
            btn.pack(side=tk.LEFT, padx=5)
            self.botoes.append(btn)

        # Frame para estado
        self.frame_estado = tk.Frame(root, bg="#2e2e2e")
        self.frame_estado.pack(pady=5)

        # Labels e barras de progresso
        self.label_estado = tk.Label(self.frame_estado, text="", bg="#2e2e2e", fg="#ffffff", font=self.fonte)
        self.label_estado.pack()

        self.label_mana = tk.Label(self.frame_estado, text="Mana:", bg="#2e2e2e", fg="#00b7eb", font=self.fonte)
        self.label_mana.pack(side=tk.LEFT, padx=5)
        self.barra_mana = ttk.Progressbar(self.frame_estado, length=100)
        self.barra_mana.pack(side=tk.LEFT, padx=5)

        self.label_saude = tk.Label(self.frame_estado, text="Saúde:", bg="#2e2e2e", fg="#ff4040", font=self.fonte)
        self.label_saude.pack(side=tk.LEFT, padx=5)
        self.barra_saude = ttk.Progressbar(self.frame_estado, length=100)
        self.barra_saude.pack(side=tk.LEFT, padx=5)

        # Botões de salvamento
        self.btn_salvar = tk.Button(root, text="Salvar Jogo", command=self.salvar_jogo, bg="#4a4a4a", fg="#ffffff", font=self.fonte)
        self.btn_salvar.pack(pady=5)
        self.btn_carregar = tk.Button(root, text="Carregar Jogo", command=self.carregar_jogo, bg="#4a4a4a", fg="#ffffff", font=self.fonte)
        self.btn_carregar.pack(pady=5)

        # Iniciar o jogo
        self.atualizar_estado()
        self.exibir_cena(jogador["cena_atual"])

    def atualizar_estado(self):
        estado = f"Nível: {jogador['nivel']} | XP: {jogador['xp']} | Conhecimento: {jogador['conhecimento']} | Inventário: {jogador['inventario']}"
        self.label_estado.config(text=estado)
        self.barra_mana["value"] = (jogador["mana"] / jogador["mana_max"]) * 100
        self.barra_saude["value"] = (jogador["saude"] / jogador["saude_max"]) * 100

    def exibir_texto(self, texto):
        self.texto.config(state='normal')
        self.texto.delete(1.0, tk.END)
        self.texto.insert(tk.END, texto)
        self.texto.config(state='disabled')

    def configurar_botoes(self, opcoes):
        for i, botao in enumerate(self.botoes):
            if i < len(opcoes):
                botao.config(text=opcoes[i], state='normal')
            else:
                botao.config(text="", state='disabled')

    def processar_escolha(self, escolha):
        cena_atual = jogador["cena_atual"]
        if cena_atual in cenas:
            cenas[cena_atual](escolha)

    def salvar_jogo(self):
        with open("save.json", "w") as f:
            json.dump(jogador, f)
        messagebox.showinfo("Sucesso", "Jogo salvo!")

    def carregar_jogo(self):
        if os.path.exists("save.json"):
            with open("save.json", "r") as f:
                global jogador
                jogador = json.load(f)
            self.atualizar_estado()
            self.exibir_cena(jogador["cena_atual"])
            messagebox.showinfo("Sucesso", "Jogo carregado!")
        else:
            messagebox.showerror("Erro", "Nenhum jogo salvo encontrado!")

    def exibir_cena(self, cena):
        jogador["cena_atual"] = cena
        if cena in cenas:
            cenas[cena](None)

# Sistema de níveis
def verificar_nivel():
    xp_requisitos = [80, 160, 240, 320]
    feitiços_por_nivel = {
        2: "Raio Congelante",
        3: "Ilusão",
        4: "Cura Arcana",
        5: "Tempestade Arcana"
    }
    nivel_anterior = jogador["nivel"]
    for nivel, xp_req in enumerate(xp_requisitos, 1):
        if jogador["xp"] >= xp_req and jogador["nivel"] < nivel + 1:
            jogador["nivel"] = nivel + 1
            jogador["saude_max"] += 15
            jogador["mana_max"] += 25
            jogador["saude"] = jogador["saude_max"]
            jogador["mana"] = jogador["mana_max"]
            if nivel + 1 in feitiços_por_nivel:
                jogador["feitiços"].append(feitiços_por_nivel[nivel + 1])
                messagebox.showinfo("Novo Feitiço", f"Você desbloqueou: {feitiços_por_nivel[nivel + 1]}!")
    if jogador["nivel"] > nivel_anterior:
        messagebox.showinfo("Subiu de Nível", f"Você alcançou o nível {jogador['nivel']}! Saúde e Mana aumentados.")

# Funções de cenas
def introducao(escolha):
    app.exibir_texto(f"""
Bem-vindo, {jogador['nome']}, Magíster Arcano!
A cidade de Vaeloria clama por sua ajuda. Desaparecimentos assombram as ruas, e luzes estranhas brilham na Floresta Sombria.
Você chega aos portões da cidade. O que deseja fazer?
1. Ir ao Salão do Conselho.
2. Visitar a taverna.
3. Explorar a biblioteca arcana.
    """)
    app.configurar_botoes(["Salão do Conselho", "Taverna", "Biblioteca", "", ""])
    if escolha is not None:
        if escolha == 0:
            jogador["cena_atual"] = "salao_conselho"
            salao_conselho(None)
        elif escolha == 1:
            jogador["cena_atual"] = "taverna"
            taverna(None)
        elif escolha == 2:
            jogador["cena_atual"] = "biblioteca"
            biblioteca(None)

def salao_conselho(escolha):
    app.exibir_texto("""
No Salão do Conselho, o Lorde Regente e o Capitão da Guarda te recebem. O Regente explica: 'Os desaparecimentos começaram há semanas.'
1. Perguntar ao Regente sobre o culto (Conhecimento >= 15).
2. Falar com o Capitão sobre suspeitas (Conhecimento >= 10).
3. Aceitar a missão e partir.
    """)
    opcoes = ["Perguntar sobre culto", "Falar com Capitão", "Partir", "", ""]
    if jogador["conhecimento"] < 15:
        opcoes[0] = ""
        app.botoes[0].config(state='disabled')
    if jogador["conhecimento"] < 10:
        opcoes[1] = ""
        app.botoes[1].config(state='disabled')
    app.configurar_botoes(opcoes)
    if escolha is not None:
        if escolha == 0 and jogador["conhecimento"] >= 15:
            app.exibir_texto("O Regente sussurra: 'Há rumores de um culto nas ruínas.'")
            jogador["conhecimento"] += 5
            jogador["xp"] += 20
            verificar_nivel()
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)
        elif escolha == 1 and jogador["conhecimento"] >= 10:
            app.exibir_texto("O Capitão diz: 'Um conselheiro age estranho. Cuidado na floresta.'")
            jogador["inventario"].append("Dica do Traidor")
            jogador["xp"] += 15
            verificar_nivel()
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)
        elif escolha == 2:
            jogador["inventario"].append("Mapa da Floresta")
            jogador["conhecimento"] += 5
            jogador["xp"] += 10
            verificar_nivel()
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)

def taverna(escolha):
    app.exibir_texto("""
Na taverna, um velho bêbado murmura sobre 'sombras que falam'. Um encapuzado te observa.
1. Confrontar o encapuzado.
2. Falar com o bêbado (Conhecimento >= 10).
3. Sair da taverna.
4. Usar Poção de Mana (se tiver).
    """)
    opcoes = ["Confrontar encapuzado", "Falar com bêbado", "Sair", "Usar Poção", ""]
    if jogador["conhecimento"] < 10:
        opcoes[1] = ""
        app.botoes[1].config(state='disabled')
    if "Poção de Mana" not in jogador["inventario"]:
        opcoes[3] = ""
        app.botoes[3].config(state='disabled')
    app.configurar_botoes(opcoes)
    if escolha is not None:
        if escolha == 0:
            app.exibir_texto("O encapuzado foge, mas deixa cair um pingente.")
            jogador["inventario"].append("Pingente Misterioso")
            jogador["xp"] += 10
            verificar_nivel()
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)
        elif escolha == 1 and jogador["conhecimento"] >= 10:
            app.exibir_texto("O bêbado diz: 'Eles se reúnem nas ruínas antigas.'")
            jogador["conhecimento"] += 5
            jogador["xp"] += 20
            verificar_nivel()
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)
        elif escolha == 2:
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)
        elif escolha == 3 and "Poção de Mana" in jogador["inventario"]:
            jogador["mana"] = min(jogador["mana_max"], jogador["mana"] + 30)
            jogador["inventario"].remove("Poção de Mana")
            app.exibir_texto("Você usou uma Poção de Mana, restaurando 30 de Mana.")
            taverna(None)

def biblioteca(escolha):
    app.exibir_texto("""
Na biblioteca arcana, você encontra um tomo sobre magias proibidas.
1. Lançar Visão Mística (-10 Mana).
2. Continuar lendo o tomo.
3. Sair da biblioteca.
4. Usar Poção de Mana (se tiver).
    """)
    opcoes = ["Visão Mística", "Ler tomo", "Sair", "Usar Poção", ""]
    if "Poção de Mana" not in jogador["inventario"]:
        opcoes[3] = ""
        app.botoes[3].config(state='disabled')
    app.configurar_botoes(opcoes)
    if escolha is not None:
        if escolha == 0 and jogador["mana"] >= 10:
            jogador["mana"] -= 10
            app.exibir_texto("Você vê uma visão: um altar na floresta, pulsando com energia negra.")
            jogador["conhecimento"] += 10
            jogador["xp"] += 20
            verificar_nivel()
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)
        elif escolha == 1:
            app.exibir_texto("O tomo menciona um culto antigo.")
            jogador["conhecimento"] += 5
            jogador["xp"] += 10
            verificar_nivel()
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)
        elif escolha == 2:
            jogador["cena_atual"] = "floresta_sombria"
            floresta_sombria(None)
        elif escolha == 3 and "Poção de Mana" in jogador["inventario"]:
            jogador["mana"] = min(jogador["mana_max"], jogador["mana"] + 30)
            jogador["inventario"].remove("Poção de Mana")
            app.exibir_texto("Você usou uma Poção de Mana, restaurando 30 de Mana.")
            biblioteca(None)

def evento_aleatorio(escolha):
    eventos = [
        ("Você encontra um baú encantado. Dentro, há uma Poção de Mana.", lambda: jogador["inventario"].append("Poção de Mana")),
        ("Uma armadilha mágica dispara! Você perde saúde.", lambda: jogador.update({"saude": max(0, jogador["saude"] - 12)})),
        ("Um viajante perdido te dá um Amuleto de Proteção.", lambda: jogador["inventario"].append("Amuleto de Proteção")),
        ("Um Corvo Necrótico ataca!", lambda: None, "combate_inimigos", {"nome": "Corvo Necrótico", "hp": 30, "dano": 12, "texto": "Um corvo necrótico voa em sua direção!", "fraqueza": ["Ilusão", "Raio Congelante"], "esquiva": 0.3})
    ]
    if escolha is None:
        evento, efeito, *extras = random.choice(eventos)
        app.exibir_texto(f"{evento}\nPressione 'Continuar' para prosseguir.")
        app.configurar_botoes(["Continuar", "", "", "", ""])
        if len(extras) > 0:
            jogador["cena_atual"] = extras[0]
            global inimigo_atual
            inimigo_atual = extras[1]
            inimigo_atual["hp_atual"] = inimigo_atual["hp"]
            combate_inimigos(None)
        else:
            efeito()
            jogador["xp"] += 15
            verificar_nivel()
            if jogador["saude"] <= 0:
                fim_jogo("Você sucumbe aos ferimentos. Vaeloria está perdida.")
            else:
                jogador["cena_atual"] = "floresta_sombria"
                floresta_sombria(None)
    else:
        jogador["cena_atual"] = "floresta_sombria"
        floresta_sombria(None)

def encontro_truidor(escolha):
    app.exibir_texto("""
Você encontra um conselheiro de Vaeloria, mas ele parece nervoso. Ele admite: 'Fui forçado a ajudar o culto!'
1. Convencê-lo a se redimir (Conhecimento >= 25).
2. Confrontá-lo.
3. Deixá-lo ir.
    """)
    opcoes = ["Convencer", "Confrontar", "Deixar ir", "", ""]
    if jogador["conhecimento"] < 25:
        opcoes[0] = ""
        app.botoes[0].config(state='disabled')
    app.configurar_botoes(opcoes)
    if escolha is not None:
        if escolha == 0 and jogador["conhecimento"] >= 25:
            app.exibir_texto("O traidor concorda em ajudar, revelando o ponto fraco do líder do culto.")
            jogador["inventario"].append("Segredo do Culto")
            jogador["conhecimento"] += 10
            jogador["xp"] += 40
            verificar_nivel()
            jogador["cena_atual"] = "ruinas_antigas"
            ruinas_antigas(None)
        elif escolha == 1:
            app.exibir_texto("O traidor entra em pânico e ativa uma armadilha mágica!")
            jogador["saude"] -= 15
            jogador["xp"] += 10
            verificar_nivel()
            if jogador["saude"] <= 0:
                fim_jogo("Você sucumbe à armadilha. Vaeloria está perdida.")
            else:
                jogador["cena_atual"] = "ruinas_antigas"
                ruinas_antigas(None)
        elif escolha == 2:
            app.exibir_texto("O traidor foge, mas deixa um mapa parcial das ruínas.")
            jogador["inventario"].append("Mapa Parcial")
            jogador["xp"] += 15
            verificar_nivel()
            jogador["cena_atual"] = "ruinas_antigas"
            ruinas_antigas(None)

def floresta_sombria(escolha):
    if random.random() < 0.4:  # Aumentado para 40% para mais eventos
        if random.random() < 0.3 and "Dica do Traidor" in jogador["inventario"]:
            jogador["cena_atual"] = "encontro_truidor"
            encontro_truidor(None)
        else:
            evento_aleatorio(None)
        return
    app.exibir_texto(f"""
Mana: {jogador['mana']}/{jogador['mana_max']} | Saúde: {jogador['saude']}/{jogador['saude_max']} | Nível: {jogador['nivel']}
Inventário: {jogador['inventario']}
Você entra na Floresta Sombria. O ar é pesado, e sussurros ecoam.
1. Explorar uma trilha estreita.
2. Lançar Visão Mística (-10 Mana).
3. Seguir um ruído estranho.
4. Usar Poção de Mana (se tiver).
    """)
    opcoes = ["Explorar trilha", "Visão Mística", "Seguir ruído", "Usar Poção", ""]
    if "Poção de Mana" not in jogador["inventario"]:
        opcoes[3] = ""
        app.botoes[3].config(state='disabled')
    app.configurar_botoes(opcoes)
    if escolha is not None:
        if escolha == 0:
            jogador["cena_atual"] = "combate_inimigos"
            combate_inimigos(None)
        elif escolha == 1 and jogador["mana"] >= 10:
            jogador["mana"] -= 10
            app.exibir_texto("Visão Mística revela uma armadilha. Você encontra ruínas antigas.")
            jogador["conhecimento"] += 5
            jogador["xp"] += 20
            verificar_nivel()
            jogador["cena_atual"] = "ruinas_antigas"
            ruinas_antigas(None)
        elif escolha == 2:
            jogador["cena_atual"] = "encontro_eremita"
            encontro_eremita(None)
        elif escolha == 3 and "Poção de Mana" in jogador["inventario"]:
            jogador["mana"] = min(jogador["mana_max"], jogador["mana"] + 30)
            jogador["inventario"].remove("Poção de Mana")
            app.exibir_texto("Você usou uma Poção de Mana, restaurando 30 de Mana.")
            floresta_sombria(None)

def combate_inimigos(escolha):
    global inimigo_atual
    if escolha is None:
        inimigos = [
            {"nome": "Lobos Sombrios", "hp": 45, "dano": 10, "texto": "Dois lobos sombrios emergem, olhos brilhando.", "fraqueza": ["Bola de Fogo", "Raio Congelante"]},
            {"nome": "Espectros Arcanos", "hp": 35, "dano": 12, "texto": "Espectros flutuam, imunes a ataques físicos.", "fraqueza": ["Visão Mística", "Ilusão"]},
            {"nome": "Golem Corrompido", "hp": 75, "dano": 15, "texto": "Um golem avança, lento mas resistente.", "fraqueza": ["Ilusão"]}
        ]
        inimigo_atual = random.choice(inimigos)
        inimigo_atual["hp_atual"] = inimigo_atual["hp"]
    
    opcoes = [f"Lançar {feitico} ({custo} Mana)" for feitico, custo in [
        ("Bola de Fogo", 20), ("Escudo Arcano", 20), ("Visão Mística", 10),
        ("Raio Congelante", 25), ("Ilusão", 15), ("Cura Arcana", 20), ("Tempestade Arcana", 50)
    ] if feitico in jogador["feitiços"]] + ["Tentar fugir"]
    
    app.exibir_texto(f"""
{inimigo_atual['texto']}
Inimigo: {inimigo_atual['nome']} | HP: {inimigo_atual['hp_atual']}/{inimigo_atual['hp']}
Jogador: Saúde: {jogador['saude']}/{jogador['saude_max']} | Mana: {jogador['mana']}/{jogador['mana_max']}
Escolha uma ação:
{'\n'.join(f'{i+1}. {opcao}' for i, opcao in enumerate(opcoes[:5]))}
    """)
    app.configurar_botoes(opcoes[:5])
    
    if escolha is not None:
        if escolha < len(opcoes) - 1:
            feitico = opcoes[escolha].split(" (")[0].replace("Lançar ", "")
            custo = int(opcoes[escolha].split("(")[1].split(" ")[0])
            if jogador["mana"] >= custo:
                jogador["mana"] -= custo
                dano = 0
                if feitico == "Bola de Fogo":
                    dano = 30 if feitico in inimigo_atual["fraqueza"] else 15
                elif feitico == "Raio Congelante":
                    dano = 25 if feitico in inimigo_atual["fraqueza"] else 10
                elif feitico == "Ilusão":
                    dano = 20 if feitico in inimigo_atual["fraqueza"] else 5
                elif feitico == "Visão Mística":
                    dano = 20 if feitico in inimigo_atual["fraqueza"] else 0
                    jogador["conhecimento"] += 5
                elif feitico == "Tempestade Arcana":
                    dano = 60 if feitico in inimigo_atual["fraqueza"] else 25
                elif feitico == "Cura Arcana":
                    jogador["saude"] = min(jogador["saude_max"], jogador["saude"] + 20)
                elif feitico == "Escudo Arcano":
                    app.exibir_texto("Escudo Arcano reduz danos por 2 turnos!")
                    jogador["escudo_turnos"] = 2
                
                # Verificar esquiva (apenas Corvo Necrótico)
                if "esquiva" in inimigo_atual and random.random() < inimigo_atual["esquiva"]:
                    app.exibir_texto(f"{inimigo_atual['nome']} esquiva seu ataque!")
                else:
                    inimigo_atual["hp_atual"] -= dano
                    app.exibir_texto(f"Você usou {feitico}, causando {dano} de dano!")
                
                if inimigo_atual["hp_atual"] <= 0:
                    app.exibir_texto(f"Você derrotou {inimigo_atual['nome']}!")
                    jogador["vitorias"] += 1
                    jogador["xp"] += 40
                    verificar_nivel()
                    if random.random() < 0.6:
                        jogador["inventario"].append("Poção de Mana")
                        app.exibir_texto("Você encontrou uma Poção de Mana!")
                    jogador["cena_atual"] = "ruinas_antigas"
                    ruinas_antigas(None)
                    return
                
                # Ataque do inimigo
                dano_inimigo = inimigo_atual["dano"]
                if jogador["escudo_turnos"] > 0:
                    dano_inimigo //= 2
                    jogador["escudo_turnos"] -= 1
                if "Amuleto de Proteção" in jogador["inventario"]:
                    dano_inimigo = int(dano_inimigo * 0.8)
                jogador["saude"] -= dano_inimigo
                app.exibir_texto(f"{inimigo_atual['nome']} ataca, causando {dano_inimigo} de dano!")
                
                if jogador["saude"] <= 0:
                    fim_jogo("Você sucumbe aos ferimentos. Vaeloria está perdida.")
                    return
                
                combate_inimigos(None)
            else:
                app.exibir_texto("Mana insuficiente! O inimigo ataca!")
                dano_inimigo = inimigo_atual["dano"]
                if jogador["escudo_turnos"] > 0:
                    dano_inimigo //= 2
                    jogador["escudo_turnos"] -= 1
                if "Amuleto de Proteção" in jogador["inventario"]:
                    dano_inimigo = int(dano_inimigo * 0.8)
                jogador["saude"] -= dano_inimigo
                app.exibir_texto(f"{inimigo_atual['nome']} ataca, causando {dano_inimigo} de dano!")
                if jogador["saude"] <= 0:
                    fim_jogo("Você sucumbe aos ferimentos. Vaeloria está perdida.")
                else:
                    combate_inimigos(None)
        elif escolha == len(opcoes) - 1:
            sorte = random.randint(1, 10)
            if sorte > 4:
                app.exibir_texto("Você escapa, mas se machuca na fuga.")
                jogador["saude"] -= 8
                jogador["cena_atual"] = "ruinas_antigas"
                ruinas_antigas(None)
            else:
                app.exibir_texto("Você não escapa e é atacado!")
                dano_inimigo = inimigo_atual["dano"]
                if jogador["escudo_turnos"] > 0:
                    dano_inimigo //= 2
                    jogador["escudo_turnos"] -= 1
                if "Amuleto de Proteção" in jogador["inventario"]:
                    dano_inimigo = int(dano_inimigo * 0.8)
                jogador["saude"] -= dano_inimigo
                app.exibir_texto(f"{inimigo_atual['nome']} ataca, causando {dano_inimigo} de dano!")
                if jogador["saude"] <= 0:
                    fim_jogo("Você sucumbe aos ferimentos. Vaeloria está perdida.")
                else:
                    combate_inimigos(None)

def encontro_eremita(escolha):
    app.exibir_texto("""
Você encontra uma eremita idosa. Ela diz: 'O culto tenta ressuscitar um mago negro.'
1. Perguntar sobre o ritual (Conhecimento >= 20).
2. Pedir ajuda.
3. Convencê-la a lutar no clímax (Conhecimento >= 15).
4. Partir.
    """)
    opcoes = ["Perguntar sobre ritual", "Pedir ajuda", "Convencer para clímax", "Partir", ""]
    if jogador["conhecimento"] < 20:
        opcoes[0] = ""
        app.botoes[0].config(state='disabled')
    if jogador["conhecimento"] < 15:
        opcoes[2] = ""
        app.botoes[2].config(state='disabled')
    app.configurar_botoes(opcoes)
    if escolha is not None:
        if escolha == 0 and jogador["conhecimento"] >= 20:
            app.exibir_texto("A eremita revela: 'O ritual pode ser selado com um pergaminho.'")
            jogador["inventario"].append("Pergaminho de Selamento")
            jogador["conhecimento"] += 10
            jogador["xp"] += 30
            verificar_nivel()
            jogador["cena_atual"] = "ruinas_antigas"
            ruinas_antigas(None)
        elif escolha == 1:
            app.exibir_texto("A eremita te dá um Amuleto de Proteção.")
            jogador["inventario"].append("Amuleto de Proteção")
            jogador["xp"] += 10
            verificar_nivel()
            jogador["cena_atual"] = "ruinas_antigas"
            ruinas_antigas(None)
        elif escolha == 2 and jogador["conhecimento"] >= 15:
            app.exibir_texto("A eremita concorda em ajudar no clímax, mas sua vida estará em risco.")
            jogador["inventario"].append("Aliada Eremita")
            jogador["xp"] += 25
            verificar_nivel()
            jogador["cena_atual"] = "ruinas_antigas"
            ruinas_antigas(None)
        elif escolha == 3:
            jogador["cena_atual"] = "ruinas_antigas"
            ruinas_antigas(None)

def ruinas_antigas(escolha):
    app.exibir_texto(f"""
Mana: {jogador['mana']}/{jogador['mana_max']} | Saúde: {jogador['saude']}/{jogador['saude_max']} | Nível: {jogador['nivel']}
Inventário: {jogador['inventario']}
Você chega às ruínas antigas. Um Guardião Rúnico bloqueia o caminho.
1. Combater o Guardião.
2. Usar Visão Mística para evitar o Guardião (-10 Mana).
3. Usar Poção de Mana (se tiver).
4. Usar Cura Arcana (-20 Mana, se disponível).
    """)
    opcoes = ["Combater Guardião", "Visão Mística", "Usar Poção", "Cura Arcana", ""]
    if "Poção de Mana" not in jogador["inventario"]:
        opcoes[2] = ""
        app.botoes[2].config(state='disabled')
    if "Cura Arcana" not in jogador["feitiços"]:
        opcoes[3] = ""
        app.botoes[3].config(state='disabled')
    app.configurar_botoes(opcoes)
    if escolha is not None:
        if escolha == 0:
            global inimigo_atual
            inimigo_atual = {"nome": "Guardião Rúnico", "hp": 70, "dano": 18, "texto": "O Guardião Rúnico desperta, suas runas brilhando!", "fraqueza": ["Tempestade Arcana", "Visão Mística"]}
            inimigo_atual["hp_atual"] = inimigo_atual["hp"]
            jogador["cena_atual"] = "combate_inimigos"
            combate_inimigos(None)
        elif escolha == 1 and jogador["mana"] >= 10:
            jogador["mana"] -= 10
            app.exibir_texto("Visão Mística revela um caminho secreto, evitando o Guardião.")
            jogador["conhecimento"] += 5
            jogador["xp"] += 20
            verificar_nivel()
            jogador["cena_atual"] = "combate_cultistas"
            combate_cultistas(None)
        elif escolha == 2 and "Poção de Mana" in jogador["inventario"]:
            jogador["mana"] = min(jogador["mana_max"], jogador["mana"] + 30)
            jogador["inventario"].remove("Poção de Mana")
            app.exibir_texto("Você usou uma Poção de Mana, restaurando 30 de Mana.")
            ruinas_antigas(None)
        elif escolha == 3 and jogador["mana"] >= 20 and "Cura Arcana" in jogador["feitiços"]:
            jogador["mana"] -= 20
            jogador["saude"] = min(jogador["saude_max"], jogador["saude"] + 20)
            app.exibir_texto("Cura Arcana restaura sua saúde!")
            ruinas_antigas(None)

def combate_cultistas(escolha):
    global inimigo_atual
    if escolha is None:
        inimigo_atual = {"nome": "Cultistas", "hp": 55, "dano": 12, "texto": "Os cultistas te cercam, brandindo adagas encantadas!", "fraqueza": ["Bola de Fogo", "Raio Congelante", "Ilusão"]}
        inimigo_atual["hp_atual"] = inimigo_atual["hp"]
    
    opcoes = [f"Lançar {feitico} ({custo} Mana)" for feitico, custo in [
        ("Bola de Fogo", 20), ("Escudo Arcano", 20), ("Visão Mística", 10),
        ("Raio Congelante", 25), ("Ilusão", 15), ("Cura Arcana", 20), ("Tempestade Arcana", 50)
    ] if feitico in jogador["feitiços"]] + ["Negociar (Conhecimento >= 20)"]
    
    app.exibir_texto(f"""
{inimigo_atual['texto']}
Inimigo: {inimigo_atual['nome']} | HP: {inimigo_atual['hp_atual']}/{inimigo_atual['hp']}
Jogador: Saúde: {jogador['saude']}/{jogador['saude_max']} | Mana: {jogador['mana']}/{jogador['mana_max']}
Escolha uma ação:
{'\n'.join(f'{i+1}. {opcao}' for i, opcao in enumerate(opcoes[:5]))}
    """)
    opcoes_disponiveis = opcoes[:5]
    if jogador["conhecimento"] < 20:
        opcoes_disponiveis[-1] = ""
        app.botoes[4].config(state='disabled')
    app.configurar_botoes(opcoes_disponiveis)
    
    if escolha is not None:
        if escolha < len(opcoes) - 1:
            feitico = opcoes[escolha].split(" (")[0].replace("Lançar ", "")
            custo = int(opcoes[escolha].split("(")[1].split(" ")[0])
            if jogador["mana"] >= custo:
                jogador["mana"] -= custo
                dano = 0
                if feitico == "Bola de Fogo":
                    dano = 30 if feitico in inimigo_atual["fraqueza"] else 15
                elif feitico == "Raio Congelante":
                    dano = 25 if feitico in inimigo_atual["fraqueza"] else 10
                elif feitico == "Ilusão":
                    dano = 20 if feitico in inimigo_atual["fraqueza"] else 5
                elif feitico == "Visão Mística":
                    dano = 10
                    jogador["conhecimento"] += 5
                elif feitico == "Tempestade Arcana":
                    dano = 60 if feitico in inimigo_atual["fraqueza"] else 25
                elif feitico == "Cura Arcana":
                    jogador["saude"] = min(jogador["saude_max"], jogador["saude"] + 20)
                elif feitico == "Escudo Arcano":
                    app.exibir_texto("Escudo Arcano reduz danos por 2 turnos!")
                    jogador["escudo_turnos"] = 2
                
                inimigo_atual["hp_atual"] -= dano
                app.exibir_texto(f"Você usou {feitico}, causando {dano} de dano!")
                
                if inimigo_atual["hp_atual"] <= 0:
                    app.exibir_texto("Você derrotou os cultistas!")
                    jogador["vitorias"] += 1
                    jogador["xp"] += 60
                    verificar_nivel()
                    jogador["cena_atual"] = "climax"
                    climax(None)
                    return
                
                # Ataque do inimigo
                dano_inimigo = inimigo_atual["dano"]
                if jogador["escudo_turnos"] > 0:
                    dano_inimigo //= 2
                    jogador["escudo_turnos"] -= 1
                if "Amuleto de Proteção" in jogador["inventario"]:
                    dano_inimigo = int(dano_inimigo * 0.8)
                jogador["saude"] -= dano_inimigo
                app.exibir_texto(f"{inimigo_atual['nome']} atacam, causando {dano_inimigo} de dano!")
                
                if jogador["saude"] <= 0:
                    fim_jogo("Você sucumbe aos cultistas. Vaeloria está perdida.")
                    return
                
                combate_cultistas(None)
            else:
                app.exibir_texto("Mana insuficiente! Os cultistas atacam!")
                dano_inimigo = inimigo_atual["dano"]
                if jogador["escudo_turnos"] > 0:
                    dano_inimigo //= 2
                    jogador["escudo_turnos"] -= 1
                if "Amuleto de Proteção" in jogador["inventario"]:
                    dano_inimigo = int(dano_inimigo * 0.8)
                jogador["saude"] -= dano_inimigo
                app.exibir_texto(f"{inimigo_atual['nome']} atacam, causando {dano_inimigo} de dano!")
                if jogador["saude"] <= 0:
                    fim_jogo("Você sucumbe aos cultistas. Vaeloria está perdida.")
                else:
                    combate_cultistas(None)
        elif escolha == len(opcoes) - 1 and jogador["conhecimento"] >= 20:
            app.exibir_texto("Você convence os cultistas a desistir.")
            jogador["xp"] += 30
            verificar_nivel()
            jogador["cena_atual"] = "climax"
            climax(None)

def climax(escolha):
    global inimigo_atual, sacerdote_vivo
    if escolha is None:
        inimigo_atual = {"nome": "Líder do Culto", "hp": 90, "dano": 18, "texto": "O líder do culto está prestes a ressuscitar o mago negro!", "fraqueza": ["Tempestade Arcana", "Bola de Fogo"]}
        inimigo_atual["hp_atual"] = inimigo_atual["hp"]
        sacerdote_vivo = True
        global sacerdote
        sacerdote = {"nome": "Sacerdote do Culto", "hp": 50, "hp_atual": 50, "dano": 15, "fraqueza": ["Bola de Fogo", "Ilusão"]}
    
    opcoes = [f"Lançar {feitico} ({custo} Mana)" for feitico, custo in [
        ("Bola de Fogo", 20), ("Escudo Arcano", 20), ("Visão Mística", 10),
        ("Raio Congelante", 25), ("Ilusão", 15), ("Cura Arcana", 20), ("Tempestade Arcana", 50)
    ] if feitico in jogador["feitiços"]] + ["Atacar Sacerdote", "Usar Conhecimento Arcano", "Sacrificar Mana (-50 Mana)"]
    
    texto = f"""
{inimigo_atual['texto']}
Inimigo: {inimigo_atual['nome']} | HP: {inimigo_atual['hp_atual']}/{inimigo_atual['hp']}
"""
    if sacerdote_vivo:
        texto += f"Sacerdote: {sacerdote['nome']} | HP: {sacerdote['hp_atual']}/{sacerdote['hp']}\n"
    texto += f"""
Jogador: Saúde: {jogador['saude']}/{jogador['saude_max']} | Mana: {jogador['mana']}/{jogador['mana_max']}
Escolha uma ação:
{'\n'.join(f'{i+1}. {opcao}' for i, opcao in enumerate(opcoes[:5]))}
"""
    app.exibir_texto(texto)
    opcoes_disponiveis = opcoes[:5]
    if not sacerdote_vivo:
        opcoes_disponiveis[-3] = ""
        app.botoes[2].config(state='disabled')
    if jogador["conhecimento"] < 30:
        opcoes_disponiveis[-2] = ""
        app.botoes[3].config(state='disabled')
    app.configurar_botoes(opcoes_disponiveis)
    
    if escolha is not None:
        if escolha < len(opcoes) - 3:
            feitico = opcoes[escolha].split(" (")[0].replace("Lançar ", "")
            custo = int(opcoes[escolha].split("(")[1].split(" ")[0])
            if jogador["mana"] >= custo:
                jogador["mana"] -= custo
                dano = 0
                if feitico == "Bola de Fogo":
                    dano = 30 if feitico in inimigo_atual["fraqueza"] else 15
                elif feitico == "Raio Congelante":
                    dano = 25
                elif feitico == "Ilusão":
                    dano = 20
                elif feitico == "Visão Mística":
                    dano = 10
                    jogador["conhecimento"] += 5
                elif feitico == "Tempestade Arcana":
                    dano = 60 if feitico in inimigo_atual["fraqueza"] else 25
                elif feitico == "Cura Arcana":
                    jogador["saude"] = min(jogador["saude_max"], jogador["saude"] + 20)
                elif feitico == "Escudo Arcano":
                    app.exibir_texto("Escudo Arcano reduz danos por 2 turnos!")
                    jogador["escudo_turnos"] = 2
                
                inimigo_atual["hp_atual"] -= dano
                app.exibir_texto(f"Você usou {feitico}, causando {dano} de dano ao Líder!")
                
                if inimigo_atual["hp_atual"] <= 0:
                    mensagem = "Você derrotou o líder! Vaeloria está salva. (Final 1: Vitória)"
                    if "Aliada Eremita" in jogador["inventario"]:
                        mensagem += "\nA eremita sobrevive e agradece sua coragem."
                    fim_jogo(mensagem)
                    return
        elif escolha == len(opcoes) - 3 and sacerdote_vivo:
            feitico = random.choice([f for f in jogador["feitiços"] if f in sacerdote["fraqueza"] or f == "Tempestade Arcana"])
            dano = 30 if feitico in sacerdote["fraqueza"] else 20
            custo = 20 if feitico != "Tempestade Arcana" else 50
            if jogador["mana"] >= custo:
                jogador["mana"] -= custo
                sacerdote["hp_atual"] -= dano
                app.exibir_texto(f"Você ataca o Sacerdote com {feitico}, causando {dano} de dano!")
                if sacerdote["hp_atual"] <= 0:
                    app.exibir_texto("O Sacerdote é derrotado!")
                    sacerdote_vivo = False
            else:
                app.exibir_texto("Mana insuficiente! O Sacerdote contra-ataca!")
                dano_inimigo = sacerdote["dano"]
                if jogador["escudo_turnos"] > 0:
                    dano_inimigo //= 2
                    jogador["escudo_turnos"] -= 1
                if "Amuleto de Proteção" in jogador["inventario"]:
                    dano_inimigo = int(dano_inimigo * 0.8)
                jogador["saude"] -= dano_inimigo
                app.exibir_texto(f"O Sacerdote ataca, causando {dano_inimigo} de dano!")
                if jogador["saude"] <= 0:
                    fim_jogo("Você sucumbe ao culto. Vaeloria está perdida. (Final 3: Derrota)")
                    return
        elif escolha == len(opcoes) - 2 and jogador["conhecimento"] >= 30:
            mensagem = "Você desvenda a fraqueza do ritual! Vaeloria está salva. (Final 1: Vitória)"
            if "Aliada Eremita" in jogador["inventario"]:
                mensagem += "\nA eremita sobrevive e agradece sua coragem."
            fim_jogo(mensagem)
            return
        elif escolha == len(opcoes) - 1 and jogador["mana"] >= 50:
            jogador["mana"] = 0
            mensagem = "Você sacrifica sua mana para selar o ritual. Vaeloria está salva, mas você perde seus poderes. (Final 2: Sacrifício)"
            if "Aliada Eremita" in jogador["inventario"]:
                mensagem += "\nA eremita perece no ritual, mas sua memória vive."
            fim_jogo(mensagem)
            return
        else:
            app.exibir_texto("Ação inválida! O culto ataca!")
        
        # Ataque do Líder
        dano_inimigo = inimigo_atual["dano"]
        if jogador["escudo_turnos"] > 0:
            dano_inimigo //= 2
            jogador["escudo_turnos"] -= 1
        if "Amuleto de Proteção" in jogador["inventario"]:
            dano_inimigo = int(dano_inimigo * 0.8)
        jogador["saude"] -= dano_inimigo
        app.exibir_texto(f"O Líder ataca, causando {dano_inimigo} de dano!")
        
        # Ação do Sacerdote (se vivo)
        if sacerdote_vivo:
            if random.random() < 0.5:
                app.exibir_texto("O Sacerdote cura o Líder!")
                inimigo_atual["hp_atual"] = min(inimigo_atual["hp"], inimigo_atual["hp_atual"] + 20)
            else:
                dano_sacerdote = sacerdote["dano"]
                if jogador["escudo_turnos"] > 0:
                    dano_sacerdote //= 2
                    jogador["escudo_turnos"] -= 1
                if "Amuleto de Proteção" in jogador["inventario"]:
                    dano_sacerdote = int(dano_sacerdote * 0.8)
                jogador["saude"] -= dano_sacerdote
                app.exibir_texto(f"O Sacerdote ataca, causando {dano_sacerdote} de dano!")
        
        if jogador["saude"] <= 0:
            fim_jogo("Você sucumbe ao culto. Vaeloria está perdida. (Final 3: Derrota)")
            return
        
        # Eremita ajuda (se presente)
        if "Aliada Eremita" in jogador["inventario"] and random.random() < 0.3:
            app.exibir_texto("A eremita lança um feitiço, enfraquecendo o culto!")
            inimigo_atual["hp_atual"] -= 15
            if sacerdote_vivo:
                sacerdote["hp_atual"] -= 10
        
        if inimigo_atual["hp_atual"] <= 0:
            mensagem = "Você derrotou o líder! Vaeloria está salva. (Final 1: Vitória)"
            if "Aliada Eremita" in jogador["inventario"]:
                mensagem += "\nA eremita sobrevive e agradece sua coragem."
            fim_jogo(mensagem)
            return
        
        climax(None)

def fim_jogo(mensagem):
    app.exibir_texto(f"""
{mensagem}
Estado final:
Nível: {jogador['nivel']} | XP: {jogador['xp']} | Conhecimento: {jogador['conhecimento']}
Saúde: {jogador['saude']}/{jogador['saude_max']} | Mana: {jogador['mana']}/{jogador['mana_max']}
Inventário: {jogador['inventario']}
Obrigado por jogar!
    """)
    app.configurar_botoes(["Sair", "", "", "", ""])
    if escolha == 0:
        app.root.quit()

# Dicionário de cenas
cenas = {
    "introducao": introducao,
    "salao_conselho": salao_conselho,
    "taverna": taverna,
    "biblioteca": biblioteca,
    "floresta_sombria": floresta_sombria,
    "combate_inimigos": combate_inimigos,
    "encontro_eremita": encontro_eremita,
    "encontro_truidor": encontro_truidor,
    "ruinas_antigas": ruinas_antigas,
    "combate_cultistas": combate_cultistas,
    "climax": climax
}

# Iniciar a interface
root = tk.Tk()
app = JogoRPG(root)
root.mainloop()